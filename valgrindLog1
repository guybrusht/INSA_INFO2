[guybrusht@ArchLaptop ProjetINFO]$ valgrind ./a.out < crashTest.dat 
==10122== Memcheck, a memory error detector
==10122== Copyright (C) 2002-2010, and GNU GPL'd, by Julian Seward et al.
==10122== Using Valgrind-3.6.1 and LibVEX; rerun with -h for copyright info
==10122== Command: ./a.out
==10122== 

 *******************************************************
 *                                                     *
 *           Resolution de A x = B                     *
 *                                                     *
 *******************************************************
 *                                                     *
 *   Precisez si A est :                               *
 *                                                     *
 *   0 => non symetrique (resolution par LU+Gauss)     *
 *   1 => symetrique (resolution par Cholesky+Gauss)   *
 *                                                     *
 *******************************************************

 *   Choix :  *   Nombre d'equations :
 *   N = 
 *   Donner les valeurs de A: 
 *   /!\ Attention: seules les valeurs du triangle inferieur sont a entrer,
 *   c'est-a-dire A[0][0], A[1][0], A[1][1], A[2][0], ...
 >    >    >    >    >    >    >    >    >    >   
############# Matrice ( A ) 
[       +1.000000       +1.000000       +1.000000       +1.000000       ]
[       +1.000000       +5.000000       +5.000000       +5.000000       ]
[       +1.000000       +5.000000       +14.000000      +14.000000      ]
[       +1.000000       +5.000000       +14.000000      +15.000000      ]


 *   Donner les valeurs pour le vecteur B: 
 >    >    >    >   
############# Matrice ( B ) 
[       +21.000000      ]
[       +81.000000      ]
[       +99.000000      ]
[       +99.000000      ]

La decomposition Cholesky donne la matrice C suivante:
############# Matrice ( A_Cholesky ) 
[       +1.000000       +0.000000       +0.000000       +0.000000       ]
[       +1.000000       +2.000000       +0.000000       +0.000000       ]
[       +1.000000       +2.000000       +3.000000       +0.000000       ]
[       +1.000000       +2.000000       +3.000000       +1.000000       ]

La resolution par Gauss donne la matrice Y suivante:
############# Matrice ( Solution[A_Cholesky*(?)=B] ) 
[       +21.000000      ]
[       +30.000000      ]
[       +6.000000       ]
[       +0.000000       ]


############# Matrice ( A_Cholesky transposee ) 
[       +1.000000       +1.000000       +1.000000       +1.000000       ]
[       +0.000000       +2.000000       +2.000000       +2.000000       ]
[       +0.000000       +0.000000       +3.000000       +3.000000       ]
[       +0.000000       +0.000000       +0.000000       +1.000000       ]

La resolution par Gauss donne la matrice X suivante:
############# Matrice ( SOLUTION FINALE ) 
[       +6.000000       ]
[       +13.000000      ]
[       +2.000000       ]
[       +0.000000       ]

Liberation memoire de A_Cholesky transposee... OK!
Liberation memoire de Solution[A_Cholesky*(?)=B]... OK!
Liberation memoire de A_Cholesky... OK!





 *   Passage a la phase de verification.
==10122== Invalid read of size 8
==10122==    at 0x40168B: calculProduitSym (func.c:259)
==10122==    by 0x40143B: produitMatriciel (func.c:215)
==10122==    by 0x400B03: main (main.c:286)
==10122==  Address 0x540f020 is 0 bytes after a block of size 32 alloc'd
==10122==    at 0x4C2541D: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==10122==    by 0x400D14: allouer_matrice_pleine (func.c:64)
==10122==    by 0x400C89: creer_matrice (func.c:42)
==10122==    by 0x401FC4: resolutionGauss (func.c:402)
==10122==    by 0x40266F: solve (func.c:544)
==10122==    by 0x400AD4: main (main.c:280)
==10122== 
==10122== Invalid read of size 8
==10122==    at 0x40161E: calculProduitSym (func.c:255)
==10122==    by 0x40143B: produitMatriciel (func.c:215)
==10122==    by 0x400B03: main (main.c:286)
==10122==  Address 0x540f020 is 0 bytes after a block of size 32 alloc'd
==10122==    at 0x4C2541D: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==10122==    by 0x400D14: allouer_matrice_pleine (func.c:64)
==10122==    by 0x400C89: creer_matrice (func.c:42)
==10122==    by 0x401FC4: resolutionGauss (func.c:402)
==10122==    by 0x40266F: solve (func.c:544)
==10122==    by 0x400AD4: main (main.c:280)
==10122== 
==10122== Invalid write of size 8
==10122==    at 0x4016CC: calculProduitSym (func.c:261)
==10122==    by 0x40143B: produitMatriciel (func.c:215)
==10122==    by 0x400B03: main (main.c:286)
==10122==  Address 0x540f370 is 0 bytes after a block of size 32 alloc'd
==10122==    at 0x4C2541D: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==10122==    by 0x400D14: allouer_matrice_pleine (func.c:64)
==10122==    by 0x400C89: creer_matrice (func.c:42)
==10122==    by 0x4013C6: produitMatriciel (func.c:210)
==10122==    by 0x400B03: main (main.c:286)
==10122== 
 *   Calcul du produit y=Ax
############# Matrice ( A * SOLUTION FINALE ) 
[       +21.000000      ]
[       +81.000000      ]
[       +99.000000      ]
[       +99.000000      ]

Liberation memoire de A * SOLUTION FINALE... OK!
Liberation memoire de SOLUTION FINALE... OK!
Liberation memoire de A... OK!
==10122== 
==10122== HEAP SUMMARY:
==10122==     in use at exit: 368 bytes in 3 blocks
==10122==   total heap usage: 27 allocs, 24 frees, 3,248 bytes allocated
==10122== 
==10122== LEAK SUMMARY:
==10122==    definitely lost: 304 bytes in 1 blocks
==10122==    indirectly lost: 64 bytes in 2 blocks
==10122==      possibly lost: 0 bytes in 0 blocks
==10122==    still reachable: 0 bytes in 0 blocks
==10122==         suppressed: 0 bytes in 0 blocks
==10122== Rerun with --leak-check=full to see details of leaked memory
==10122== 
==10122== For counts of detected and suppressed errors, rerun with: -v
==10122== ERROR SUMMARY: 14 errors from 3 contexts (suppressed: 7 from 7)
